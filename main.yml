- name: test
  hosts: localhost
  tasks:
  - name: register loop output
    shell: "echo {{ item }}"
    loop:
      - "one"
      - "two"
    register: echo

- name: Main test
    win_shell: "Test-NetConnection {{ item }} -informationlevel Quiet"
    # win_shell: "Get-CimInstance -ClassName Win32_PingStatus -Filter "(Address='sccm-client1' or Address='wsus-01' or Address='sccm-client2')" | Format-List * -force"
    loop:
      - sccm-client1
      # - wsus-01
      - wsus-client2
    register: connection_output

- name: Check Server
  set_fact:
    client_connectivity: "{{ client_connectivity | default([]) + [item.item ~ ': pass'] }}"
    cacheable: yes
  when: "'False' in {{item.stdout_lines}}"
  loop: "{{connection_output.results}}"
  # - name: Fail if return code is not 0
  #   debug:
  #     msg: "The command ({{ item.item }}) have a 0 return code"
  #   when: item.rc == 0
  #   loop: "{{ echo.results }}"

  # - name: Place the result of the current item in the variable
  #   shell: echo "{{ item }}"
  #   loop:
  #     - one
  #     - two
  #   register: echo
  #   changed_when: echo.stdout != "one"


    # - name: checking the module
    #   command: "{{ item }}"
    #   loop:
    #     - date
    #     - uptime
    #   register: output

    # - debug:
    #     msg: "{{item.stdout}}"
    #   loop: "{{output.results}}"

    # - name: Date
    #   set_fact:
    #     date: "Date: {{ ansible_date_time.date }}"

    # - name: Time
    #   set_fact:
    #     time: "Time: {{ ansible_date_time.time }}"

    # - name: check date
    #   debug:
    #     var: date
  
    # - name: check time
    #   debug:
    #     var: time


    # - shell: printf "X\nY\nZ\n   1 some_word1\n   1 some_word2\n   1 some_word3\n   1 some_word4" |  awk '{print $2}'
    #   register: output
    # - debug:
    #     msg: "{{ output.stdout_lines }}"

    # - name: Save command output for later
    #   set_stats:
    #     data:
    #       output1: "{{ output.stdout_lines[3:] }}"

    # - name: get json output
    #   set_fact: 
    #     combine_data: "{{ combine_data | default({}) | combine({'date': date, 'time': time}) }}"
    #     cacheable: yes
    
          

    # - name: create folder
    #   delegate_facts: True
    #   run_once: yes
    #   file:
    #     path: "./reports"
    #     state: directory

    # - name: Generate report
    #   template:
    #     src: ./test.j2
    #     dest: "./test.csv"

        # - name: Save command output for later
        #   set_fact:
        #     cacheable: yes
        #     output: "{{ msg }}"
